/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 -t public/models/television_edit/television_edit.gltf
*/

import * as THREE from "three";
import React, { useRef, useState } from "react";
import { useGLTF, useVideoTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Television_01: THREE.Mesh;
    Screen: THREE.Mesh;
  };
  materials: {
    Television_01: THREE.MeshStandardMaterial;
  };
};

export function Television(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "models/television_edit/television_edit.gltf"
  ) as GLTFResult;

  const [video] = useState(() =>
    Object.assign(document.createElement("video"), {
      src: "",
      crossOrigin: "Anonymous",
      loop: true,
    })
  );
  const texture = useVideoTexture("assets/abstract.mp4", { loop: true });
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Television_01.geometry}
        material={materials.Television_01}
      />

      <mesh
        geometry={nodes.Screen.geometry}
        // material={materials.Television_01}
      >
        <meshPhysicalMaterial
          clearcoat={1}
          clearcoatRoughness={0}
          emissive={"#7FD1D4"}
          emissiveIntensity={1}
          map={texture}
          toneMapped={false}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/television_edit.gltf");
